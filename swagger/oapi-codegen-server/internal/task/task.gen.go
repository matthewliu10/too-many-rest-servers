// Package petstore provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package task

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// RequestTask defines model for requestTask.
type RequestTask struct {
	// Due The date the task should be completed by
	Due *time.Time `json:"due,omitempty"`

	// Tags Tags associated with the task
	Tags *[]string `json:"tags,omitempty"`

	// Text Description of the task
	Text *string `json:"text,omitempty"`
}

// Task defines model for task.
type Task struct {
	// Due The date the task should be completed by
	Due *time.Time `json:"due,omitempty"`

	// Id Unique identifier for the task
	Id *int `json:"id,omitempty"`

	// Tags Tags associated with the task
	Tags *[]string `json:"tags,omitempty"`

	// Text Description of the task
	Text *string `json:"text,omitempty"`
}

// TaskList defines model for taskList.
type TaskList = []Task

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve all tasks with a certain due date
	// (GET /due/{year}/{month}/{day})
	GetByDueDate(ctx echo.Context, year string, month string, day string) error
	// Retrieve all tasks with a certain tag
	// (GET /tag/{tagname})
	GetTasksByTag(ctx echo.Context, tagname string) error
	// Delete all tasks
	// (DELETE /task/)
	DeleteAllTasks(ctx echo.Context) error
	// Retrieve all tasks
	// (GET /task/)
	GetAllTasks(ctx echo.Context) error
	// Create a new task
	// (POST /task/)
	CreateTask(ctx echo.Context) error
	// Delete task by ID
	// (DELETE /task/{id})
	DeleteTask(ctx echo.Context, id int) error
	// Retrieve task by ID
	// (GET /task/{id})
	GetTask(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetByDueDate converts echo context to params.
func (w *ServerInterfaceWrapper) GetByDueDate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year string

	err = runtime.BindStyledParameterWithOptions("simple", "year", ctx.Param("year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month string

	err = runtime.BindStyledParameterWithOptions("simple", "month", ctx.Param("month"), &month, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	// ------------- Path parameter "day" -------------
	var day string

	err = runtime.BindStyledParameterWithOptions("simple", "day", ctx.Param("day"), &day, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter day: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetByDueDate(ctx, year, month, day)
	return err
}

// GetTasksByTag converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasksByTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagname" -------------
	var tagname string

	err = runtime.BindStyledParameterWithOptions("simple", "tagname", ctx.Param("tagname"), &tagname, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagname: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTasksByTag(ctx, tagname)
	return err
}

// DeleteAllTasks converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAllTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAllTasks(ctx)
	return err
}

// GetAllTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllTasks(ctx)
	return err
}

// CreateTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTask(ctx)
	return err
}

// DeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTask(ctx, id)
	return err
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTask(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/due/:year/:month/:day", wrapper.GetByDueDate)
	router.GET(baseURL+"/tag/:tagname", wrapper.GetTasksByTag)
	router.DELETE(baseURL+"/task/", wrapper.DeleteAllTasks)
	router.GET(baseURL+"/task/", wrapper.GetAllTasks)
	router.POST(baseURL+"/task/", wrapper.CreateTask)
	router.DELETE(baseURL+"/task/:id", wrapper.DeleteTask)
	router.GET(baseURL+"/task/:id", wrapper.GetTask)

}
