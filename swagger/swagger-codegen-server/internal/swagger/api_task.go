/*
 * Sample REST Server
 *
 * TODO
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"mime"
	"net/http"
	"strconv"
	"time"

	"swagger-codegen-server/internal/taskstore"

	"github.com/gorilla/mux"
)

var store = taskstore.New()

func renderJSON(w http.ResponseWriter, data interface{}) {
	js, err := json.Marshal(data)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write(js)
}

func CreateTask(w http.ResponseWriter, r *http.Request) {
	type Response struct {
		Id int
	}

	contentType := r.Header.Get("Content-Type")
	mediaType, _, err := mime.ParseMediaType(contentType)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if mediaType != "application/json" {
		http.Error(w, "expect application/json Content-Type", http.StatusUnsupportedMediaType)
		return
	}

	decoder := json.NewDecoder(r.Body)
	decoder.DisallowUnknownFields()
	var taskStruct RequestTask

	if err := decoder.Decode(&taskStruct); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	id := store.CreateTask(taskStruct.Text, taskStruct.Tags, taskStruct.Due)
	renderJSON(w, Response{id})
}

func DeleteAllTasks(w http.ResponseWriter, r *http.Request) {
	if err := store.DeleteAllTasks(); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}

	w.WriteHeader(http.StatusNoContent)
}

func DeleteTask(w http.ResponseWriter, r *http.Request) {
	id, err := strconv.Atoi(mux.Vars(r)["id"])
	if err != nil {
		http.Error(w, "invalid id", http.StatusBadRequest)
		return
	}

	if err = store.DeleteTask(id); err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	}

	w.WriteHeader(http.StatusNoContent)
}

func GetAllTasks(w http.ResponseWriter, r *http.Request) {
	tasks := store.GetAllTasks()

	renderJSON(w, tasks)
}

func GetByDueDate(w http.ResponseWriter, r *http.Request) {
	year, yearErr := strconv.Atoi(mux.Vars(r)["year"])
	month, monthErr := strconv.Atoi(mux.Vars(r)["month"])
	day, dayErr := strconv.Atoi(mux.Vars(r)["day"])

	if yearErr != nil || monthErr != nil || dayErr != nil {
		http.Error(w, "expect /due/<year>/<month>/<day>/", http.StatusBadRequest)
		return
	}

	tasks := store.GetByDueDate(year, time.Month(month), day)

	renderJSON(w, tasks)
}

func GetTask(w http.ResponseWriter, r *http.Request) {
	id, err := strconv.Atoi(mux.Vars(r)["id"])
	if err != nil {
		http.Error(w, "invalid id", http.StatusBadRequest)
		return

	}
	task, err := store.GetTask(id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	}

	renderJSON(w, task)
}

func GetTasksByTag(w http.ResponseWriter, r *http.Request) {
	tag := mux.Vars(r)["tagname"]
	tasks := store.GetTasksByTag(tag)

	renderJSON(w, tasks)
}
